name: Build Windows Meld (Direct Install)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  windows-build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-python
          mingw-w64-x86_64-python-pip
          mingw-w64-x86_64-python-gobject
          mingw-w64-x86_64-python-cairo
          mingw-w64-x86_64-gtk3
          mingw-w64-x86_64-gtksourceview4
          mingw-w64-x86_64-adwaita-icon-theme
          mingw-w64-x86_64-gsettings-desktop-schemas
          mingw-w64-x86_64-meson
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-gettext
          mingw-w64-x86_64-glib2
    
    - name: Create dummy tools
      shell: msys2 {0}
      run: |
        mkdir -p /usr/local/bin
        for tool in itstool update-desktop-database appstreamcli desktop-file-validate; do
          echo -e '#!/bin/bash\nexit 0' > /usr/local/bin/$tool
          chmod +x /usr/local/bin/$tool
        done
        export PATH=/usr/local/bin:$PATH
    
    - name: Configure and build
      shell: msys2 {0}
      run: |
        export PATH=/usr/local/bin:$PATH
        
        # Disable help if needed
        grep -q "^subdir('help')" meson.build && sed -i "s/^subdir('help')/#subdir('help')/" meson.build
        
        # Use a simple local directory as prefix
        mkdir -p $(pwd)/meld_install
        
        meson setup _build --prefix=$(pwd)/meld_install --buildtype=release
        cd _build
        ninja
        ninja install
    
    - name: Create portable package
      shell: msys2 {0}
      run: |
        # Now files should be in meld_install/
        if [ ! -d "meld_install" ]; then
          echo "ERROR: meld_install directory not found"
          ls -la
          exit 1
        fi
        
        # Create portable directory
        mkdir -p portable/meld
        cp -r meld_install/* portable/meld/
        
        # Find Python version and actual DLL names
        python_version=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
        
        echo "=== Looking for Python DLLs ==="
        ls -la /mingw64/bin/ | grep -i python | head -10
        
        # Copy Python and find the correct DLL name
        cp /mingw64/bin/python3.exe portable/meld/bin/
        
        # Copy Python DLL (try different possible names)
        for dll in libpython${python_version}.dll libpython3.dll python${python_version}.dll python3.dll; do
          if [ -f "/mingw64/bin/$dll" ]; then
            echo "Found Python DLL: $dll"
            cp "/mingw64/bin/$dll" portable/meld/bin/
            break
          fi
        done
        
        # Copy all DLLs that Python needs
        cd portable/meld/bin
        echo "=== Copying dependencies ==="
        
        # Use ldd to find all dependencies
        for exe in python3.exe meld; do
          if [ -f "$exe" ]; then
            ldd "$exe" 2>/dev/null | grep -E "(mingw64|msys64)" | awk '{print $3}' | sort -u | while read dll; do
              if [ -f "$dll" ]; then
                cp "$dll" . 2>/dev/null || true
              fi
            done
          fi
        done
        
        # Manually copy important GTK/GLib DLLs that might be missed
        cd /mingw64/bin
        for pattern in libgtk-3 libgdk-3 libgtksourceview-4 libglib-2 libgobject-2 libgio-2 \
                       libpango libcairo libgdk_pixbuf libatk libintl zlib1 libffi \
                       libgcc_s libwinpthread libstdc++ libiconv libharfbuzz libpng \
                       libfribidi libepoxy libgraphite2; do
          cp ${pattern}*.dll "$OLDPWD" 2>/dev/null || true
        done
        cd "$OLDPWD"
        
        cd ../../..
        
        # Copy Python libraries
        echo "=== Copying Python libraries ==="
        cp -r /mingw64/lib/python${python_version} portable/meld/lib/
        
        # Copy GTK runtime
        for dir in gdk-pixbuf-2.0 gtk-3.0 girepository-1.0; do
          [ -d "/mingw64/lib/$dir" ] && cp -r /mingw64/lib/$dir portable/meld/lib/
        done
        
        # Copy share files
        mkdir -p portable/meld/share
        cp -r /mingw64/share/glib-2.0 portable/meld/share/ 2>/dev/null || true
        cp -r /mingw64/share/gtksourceview-4 portable/meld/share/ 2>/dev/null || true
        cp -r /mingw64/share/icons portable/meld/share/ 2>/dev/null || true
        cp -r /mingw64/share/themes portable/meld/share/ 2>/dev/null || true
        
        # Also copy locale for translations
        if [ -d "meld_install/share/locale" ]; then
          cp -r meld_install/share/locale portable/meld/share/
        fi
        
        # Compile schemas
        if [ -d "portable/meld/share/glib-2.0/schemas" ]; then
          glib-compile-schemas portable/meld/share/glib-2.0/schemas || true
        fi
        
        # Create batch launcher
        cat > portable/meld/meld.bat << 'EOF'
        @echo off
        set DIR=%~dp0
        set PATH=%DIR%bin;%PATH%
        set PYTHONPATH=%DIR%lib\python3.12;%DIR%lib\python3.12\site-packages
        set GI_TYPELIB_PATH=%DIR%lib\girepository-1.0
        set GSETTINGS_SCHEMA_DIR=%DIR%share\glib-2.0\schemas
        set GTK_DATA_PREFIX=%DIR%
        set GTK_EXE_PREFIX=%DIR%
        set GTK_PATH=%DIR%
        
        cd /d "%DIR%"
        start "" "%DIR%bin\python3.exe" "%DIR%bin\meld" %*
        EOF
        
        # Test if meld script exists
        echo "=== Checking meld executable ==="
        if [ -f "portable/meld/bin/meld" ]; then
          echo "Found meld script"
          head -5 portable/meld/bin/meld
        else
          echo "ERROR: meld script not found!"
        fi
        
        # Create archive
        cd portable
        7z a ../meld-windows.zip meld/ || zip -r ../meld-windows.zip meld/
        tar -czf ../meld-windows.tar.gz meld/
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: meld-windows
        path: |
          meld-windows.zip
          meld-windows.tar.gz
