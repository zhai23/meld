name: Build Windows Meld (Simplified)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  windows-build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-python
          mingw-w64-x86_64-python-pip
          mingw-w64-x86_64-python-gobject
          mingw-w64-x86_64-python-cairo
          mingw-w64-x86_64-gtk3
          mingw-w64-x86_64-gtksourceview4
          mingw-w64-x86_64-adwaita-icon-theme
          mingw-w64-x86_64-gsettings-desktop-schemas
          mingw-w64-x86_64-meson
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-gettext
          mingw-w64-x86_64-glib2
          mingw-w64-x86_64-gcc
    
    - name: Patch build to skip optional tools
      shell: msys2 {0}
      run: |
        echo "=== Patching meson.build files ==="
        
        # Main meson.build - disable help
        sed -i "s/^subdir('help')/#subdir('help')/" meson.build 2>/dev/null || true
        
        # Create a modified meson_options.txt if needed
        if [ -f "meson_options.txt" ]; then
          cp meson_options.txt meson_options.txt.backup
        fi
        
        # Patch data/meson.build to make all post-install scripts optional
        if [ -f "data/meson.build" ]; then
          cp data/meson.build data/meson.build.backup
          
          # Replace meson.add_install_script with comments
          sed -i "s/meson\.add_install_script(/# meson.add_install_script(/g" data/meson.build
          
          # Show changes
          echo "=== Changes made to data/meson.build ==="
          diff -u data/meson.build.backup data/meson.build || true
        fi
    
    - name: Create tool wrappers
      shell: msys2 {0}
      run: |
        # Create a tools directory
        mkdir -p "$HOME/dummy_tools"
        
        # Create simple executable scripts
        for tool in itstool appstreamcli desktop-file-validate update-desktop-database; do
          cat > "$HOME/dummy_tools/$tool" << 'EOF'
#!/bin/sh
exit 0
EOF
          chmod +x "$HOME/dummy_tools/$tool"
        done
        
        # Add to PATH for this step and future steps
        export PATH="$HOME/dummy_tools:$PATH"
        echo "PATH=$PATH" >> $GITHUB_ENV
    
    - name: Build Meld
      shell: msys2 {0}
      run: |
        # Create build and install directories
        mkdir -p build
        mkdir -p install
        
        # Configure with absolute path for prefix
        meson setup build --prefix="$(pwd)/install" --buildtype=release
        
        # Build
        ninja -C build
        
        # Install
        ninja -C build install
    
    - name: Create portable package
      shell: msys2 {0}
      run: |
        # Create portable structure
        mkdir -p meld-portable/{bin,lib,share}
        
        # Copy installed files
        cp -r install/* meld-portable/
        
        # Get Python version
        PYTHON_VERSION=$(python3 -c 'import sys; print(f"{sys.version_info.major}.{sys.version_info.minor}")')
        echo "Python version: $PYTHON_VERSION"
        
        # Copy Python executable and libraries
        cp /mingw64/bin/python3.exe meld-portable/bin/
        cp -r /mingw64/lib/python${PYTHON_VERSION} meld-portable/lib/
        
        # Copy all required DLLs (simplified approach)
        cd meld-portable/bin
        
        # Copy DLLs that Python and GTK need
        for dll in /mingw64/bin/*.dll; do
          # Skip obviously large/unnecessary DLLs
          basename=$(basename "$dll")
          case "$basename" in
            *test*|*example*|*demo*) continue ;;
            *) cp "$dll" . 2>/dev/null || true ;;
          esac
        done
        
        cd ../..
        
        # Copy GTK runtime data
        for dir in gtk-3.0 gdk-pixbuf-2.0 girepository-1.0; do
          [ -d "/mingw64/lib/$dir" ] && cp -r "/mingw64/lib/$dir" meld-portable/lib/
        done
        
        # Copy themes and icons
        for dir in themes icons; do
          [ -d "/mingw64/share/$dir" ] && cp -r "/mingw64/share/$dir" meld-portable/share/
        done
        
        # Copy other required share directories
        [ -d "/mingw64/share/glib-2.0" ] && cp -r /mingw64/share/glib-2.0 meld-portable/share/
        [ -d "/mingw64/share/gtksourceview-4" ] && cp -r /mingw64/share/gtksourceview-4 meld-portable/share/
        
        # Ensure schemas are compiled
        if [ -d "meld-portable/share/glib-2.0/schemas" ]; then
          glib-compile-schemas meld-portable/share/glib-2.0/schemas || true
        fi
        
        # Create launcher script
        cat > meld-portable/meld.bat << EOF
@echo off
setlocal
set MELD_HOME=%~dp0
set PATH=%MELD_HOME%bin;%PATH%
set PYTHONPATH=%MELD_HOME%lib\python${PYTHON_VERSION};%MELD_HOME%lib\python${PYTHON_VERSION}\site-packages
set GI_TYPELIB_PATH=%MELD_HOME%lib\girepository-1.0
set GSETTINGS_SCHEMA_DIR=%MELD_HOME%share\glib-2.0\schemas
set GTK_DATA_PREFIX=%MELD_HOME%
set GTK_EXE_PREFIX=%MELD_HOME%
set GTK_PATH=%MELD_HOME%

"%MELD_HOME%bin\python3.exe" "%MELD_HOME%bin\meld" %*
EOF
        
        # Verify package
        echo "=== Package contents verification ==="
        echo "Checking for key files:"
        [ -f "meld-portable/bin/meld" ] && echo "✓ meld script" || echo "✗ meld script"
        [ -f "meld-portable/bin/python3.exe" ] && echo "✓ python3.exe" || echo "✗ python3.exe"
        [ -d "meld-portable/lib/python${PYTHON_VERSION}" ] && echo "✓ Python libs" || echo "✗ Python libs"
        [ -d "meld-portable/share/glib-2.0/schemas" ] && echo "✓ GLib schemas" || echo "✗ GLib schemas"
        [ -f "meld-portable/share/glib-2.0/schemas/gschemas.compiled" ] && echo "✓ Compiled schemas" || echo "✗ Compiled schemas"
        
        # Create archive
        echo "=== Creating archive ==="
        7z a meld-windows-portable.zip meld-portable/
        
        # Also create a self-extracting archive if possible
        7z a -sfx7z.sfx meld-windows-portable.exe meld-portable/ 2>/dev/null || true
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: meld-windows-portable
        path: |
          meld-windows-portable.zip
          meld-windows-portable.exe
        if-no-files-found: warn
