name: Build Windows Meld (Fixed Packaging)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  windows-build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-python
          mingw-w64-x86_64-python-pip
          mingw-w64-x86_64-python-gobject
          mingw-w64-x86_64-python-cairo
          mingw-w64-x86_64-gtk3
          mingw-w64-x86_64-gtksourceview4
          mingw-w64-x86_64-adwaita-icon-theme
          mingw-w64-x86_64-gsettings-desktop-schemas
          mingw-w64-x86_64-meson
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-gettext
          mingw-w64-x86_64-glib2
          mingw-w64-x86_64-libxml2
          mingw-w64-x86_64-libxslt
    
    - name: Create dummy tools
      shell: msys2 {0}
      run: |
        mkdir -p /usr/local/bin
        
        # Create dummy tools
        for tool in itstool update-desktop-database appstreamcli desktop-file-validate; do
          cat > /usr/local/bin/$tool << 'EOF'
        #!/bin/bash
        exit 0
        EOF
          chmod +x /usr/local/bin/$tool
        done
        
        export PATH=/usr/local/bin:$PATH
        echo "PATH=$PATH" >> $GITHUB_ENV
    
    - name: Configure build
      shell: msys2 {0}
      run: |
        export PATH=/usr/local/bin:$PATH
        
        # Disable help directory if needed
        if grep -q "^subdir('help')" meson.build; then
          sed -i "s/^subdir('help')/#subdir('help')/" meson.build
        fi
        
        # Configure with a local prefix instead of /mingw64
        meson setup _build --prefix=/usr --buildtype=release
    
    - name: Build
      shell: msys2 {0}
      run: |
        cd _build
        ninja
    
    - name: Create portable package
      shell: msys2 {0}
      run: |
        cd _build
        
        # Install to a local staging directory
        DESTDIR=$(pwd)/staging ninja install
        
        cd ..
        
        # Create portable directory
        mkdir -p portable/meld
        
        # Copy from the correct staging location
        if [ -d "_build/staging/usr" ]; then
          echo "=== Found installed files in staging/usr ==="
          cp -r _build/staging/usr/* portable/meld/
        else
          echo "=== Looking for installed files ==="
          find _build/staging -type f | head -20
        fi
        
        # Get Python version
        python_version=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
        echo "Python version: $python_version"
        
        # Copy Python executable and core DLLs
        mkdir -p portable/meld/bin
        cp /mingw64/bin/python3.exe portable/meld/bin/
        cp /mingw64/bin/python${python_version}.dll portable/meld/bin/
        
        # Use ldd to find dependencies for the Python executable
        echo "=== Finding dependencies ==="
        cd portable/meld/bin
        ldd python3.exe | grep mingw64 | awk '{print $3}' | sort -u | while read dll; do
          if [ -f "$dll" ] && [ ! -f "$(basename "$dll")" ]; then
            cp "$dll" .
            echo "Copied $(basename "$dll")"
          fi
        done
        
        # Also copy GTK and related DLLs that might not show up in ldd
        for lib in gtk-3-0 gdk-3-0 gtksourceview-4-0 pango-1.0-0 pangocairo-1.0-0 \
                   cairo-2 cairo-gobject-2 gdk_pixbuf-2.0-0 rsvg-2-2; do
          [ -f "/mingw64/bin/lib${lib}.dll" ] && cp "/mingw64/bin/lib${lib}.dll" .
        done
        
        cd ../../..
        
        # Copy Python standard library
        mkdir -p portable/meld/lib
        cp -r /mingw64/lib/python${python_version} portable/meld/lib/
        
        # Copy GTK runtime files
        for dir in gdk-pixbuf-2.0 gtk-3.0 girepository-1.0; do
          if [ -d "/mingw64/lib/$dir" ]; then
            cp -r "/mingw64/lib/$dir" portable/meld/lib/
          fi
        done
        
        # Copy share files
        mkdir -p portable/meld/share
        for item in glib-2.0/schemas gtksourceview-4 icons/Adwaita icons/hicolor; do
          src="/mingw64/share/$item"
          if [ -d "$src" ]; then
            dest="portable/meld/share/$(dirname "$item")"
            mkdir -p "$dest"
            cp -r "$src" "$dest/"
          fi
        done
        
        # Copy locale files for translations
        if [ -d "/mingw64/share/locale" ]; then
          mkdir -p portable/meld/share
          cp -r /mingw64/share/locale portable/meld/share/
        fi
        
        # Compile GSettings schemas
        if [ -f "portable/meld/bin/glib-compile-schemas.exe" ]; then
          portable/meld/bin/glib-compile-schemas.exe portable/meld/share/glib-2.0/schemas
        elif command -v glib-compile-schemas &> /dev/null; then
          glib-compile-schemas portable/meld/share/glib-2.0/schemas
        fi
        
        # Create launcher script
        cat > portable/meld/meld.cmd << 'BATCH_SCRIPT'
        @echo off
        setlocal
        
        set MELD_ROOT=%~dp0
        set MELD_ROOT=%MELD_ROOT:~0,-1%
        
        set PATH=%MELD_ROOT%\bin;%PATH%
        set PYTHONPATH=%MELD_ROOT%\lib\python3.12;%MELD_ROOT%\lib\python3.12\site-packages
        set GI_TYPELIB_PATH=%MELD_ROOT%\lib\girepository-1.0
        set GSETTINGS_SCHEMA_DIR=%MELD_ROOT%\share\glib-2.0\schemas
        set GTK_DATA_PREFIX=%MELD_ROOT%
        set GTK_EXE_PREFIX=%MELD_ROOT%
        set GTK_PATH=%MELD_ROOT%
        
        cd /d "%MELD_ROOT%"
        "%MELD_ROOT%\bin\python3.exe" "%MELD_ROOT%\bin\meld" %*
        BATCH_SCRIPT
        
        # Show what we've packaged
        echo "=== Package structure ==="
        find portable/meld -type f -name "*.exe" -o -name "meld" | head -10
        
        # Create archives
        cd portable
        tar -czf ../meld-windows-portable.tar.gz meld/
        7z a ../meld-windows-portable.zip meld/ 2>/dev/null || zip -r ../meld-windows-portable.zip meld/
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: meld-windows-build
        path: |
          meld-windows-portable.tar.gz
          meld-windows-portable.zip
        if-no-files-found: warn
