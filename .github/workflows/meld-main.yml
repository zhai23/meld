name: Debug and Build Windows Meld

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  windows-build-debug:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-python
          mingw-w64-x86_64-python-gobject
          mingw-w64-x86_64-python-cairo
          mingw-w64-x86_64-gtk3
          mingw-w64-x86_64-gtksourceview4
          mingw-w64-x86_64-adwaita-icon-theme
          mingw-w64-x86_64-gsettings-desktop-schemas
          mingw-w64-x86_64-meson
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-gettext
          mingw-w64-x86_64-glib2
    
    - name: Debug - Show project files
      shell: msys2 {0}
      run: |
        echo "=== Root directory files ==="
        ls -la
        
        echo -e "\n=== meson.build first 30 lines ==="
        head -30 meson.build
        
        echo -e "\n=== Checking subdirectories ==="
        for dir in data help meld po; do
          if [ -d "$dir" ]; then
            echo "Directory $dir exists"
            if [ -f "$dir/meson.build" ]; then
              echo "  Has meson.build"
            fi
          fi
        done
    
    - name: Debug - Test meson setup
      shell: msys2 {0}
      run: |
        echo "=== Testing meson setup with full output ==="
        meson setup _build --prefix=/mingw64 2>&1 | tee meson-output.log || {
          echo -e "\n=== MESON FAILED ==="
          echo "Exit code: $?"
          
          if [ -f "_build/meson-logs/meson-log.txt" ]; then
            echo -e "\n=== Full meson log ==="
            cat _build/meson-logs/meson-log.txt
          fi
          
          echo -e "\n=== Captured output ==="
          cat meson-output.log
          
          # Don't exit, let's try to fix it
        }
    
    - name: Fix - Remove problematic subdirs
      shell: msys2 {0}
      run: |
        # Clean up previous attempt
        rm -rf _build
        
        echo "=== Creating modified meson.build ==="
        cp meson.build meson.build.original
        
        # Remove problematic subdirectories from build
        # Common issues: help (needs itstool), po (needs gettext tools)
        cat meson.build.original | \
          sed "s/^subdir('help')/#subdir('help')/" | \
          sed "s/^subdir('po')/#subdir('po')/" > meson.build
        
        echo -e "\n=== Diff of changes ==="
        diff -u meson.build.original meson.build || true
        
        echo -e "\n=== Attempting build without help/po ==="
        meson setup _build --prefix=/mingw64
    
    - name: Build if configuration succeeded
      if: success()
      shell: msys2 {0}
      run: |
        cd _build
        ninja -j2
    
    - name: Create minimal package
      if: success()
      shell: msys2 {0}
      run: |
        cd _build
        
        # Install to staging
        DESTDIR=$(pwd)/staging ninja install
        
        # Create archive of what we built
        cd staging
        tar -czf ../../meld-windows-minimal.tar.gz mingw64/
        
        echo "=== Package contents ==="
        tar -tzf ../../meld-windows-minimal.tar.gz | head -20
    
    - name: Alternative - Direct run from source
      if: failure()
      shell: msys2 {0}
      run: |
        echo "=== Trying to run Meld directly from source ==="
        
        # Check if meld script exists
        if [ -f "bin/meld" ]; then
          echo "Found bin/meld"
          python3 bin/meld --version || echo "Direct run failed"
        fi
        
        # Check for meld module
        if [ -d "meld" ] && [ -f "meld/__main__.py" ]; then
          echo "Found meld module"
          python3 -m meld --version || echo "Module run failed"
        fi
        
        # Package source as-is
        echo "=== Creating source package ==="
        tar -czf meld-source.tar.gz \
          --exclude='.git' \
          --exclude='_build' \
          --exclude='*.tar.gz' \
          .
    
    - name: Upload all outputs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: meld-debug-output
        path: |
          meson-output.log
          meld-windows-minimal.tar.gz
          meld-source.tar.gz
          _build/meson-logs/
        if-no-files-found: warn
