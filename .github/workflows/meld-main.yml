name: Build Windows Meld (WSL Fix)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  windows-build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-python
          mingw-w64-x86_64-python-pip
          mingw-w64-x86_64-python-gobject
          mingw-w64-x86_64-python-cairo
          mingw-w64-x86_64-gtk3
          mingw-w64-x86_64-gtksourceview4
          mingw-w64-x86_64-adwaita-icon-theme
          mingw-w64-x86_64-gsettings-desktop-schemas
          mingw-w64-x86_64-meson
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-gettext
          mingw-w64-x86_64-glib2
    
    - name: Patch meson files to skip problematic scripts
      shell: msys2 {0}
      run: |
        echo "=== Patching meson build files ==="
        
        # Remove help directory if it exists
        if grep -q "^subdir('help')" meson.build; then
          sed -i "s/^subdir('help')/#subdir('help')/" meson.build
        fi
        
        # Patch data/meson.build to skip update-desktop-database
        if [ -f "data/meson.build" ]; then
          cp data/meson.build data/meson.build.backup
          
          # Comment out update-desktop-database calls
          sed -i "s/meson.add_install_script('update-desktop-database'/#&/" data/meson.build
          sed -i "/update.*desktop.*database/s/^/#/" data/meson.build
          
          # Show what we changed
          echo "=== Changes to data/meson.build ==="
          diff -u data/meson.build.backup data/meson.build || true
        fi
    
    - name: Create dummy executables in PATH
      shell: msys2 {0}
      run: |
        # Create dummy executables that meson can find directly
        mkdir -p /mingw64/bin_dummy
        
        # itstool - Python script
        cat > /mingw64/bin_dummy/itstool << 'EOF'
        #!/usr/bin/env python3
        import sys
        sys.exit(0)
        EOF
        chmod +x /mingw64/bin_dummy/itstool
        
        # update-desktop-database - exe wrapper
        gcc -o /mingw64/bin_dummy/update-desktop-database.exe -x c - << 'EOF'
        #include <stdio.h>
        int main() { return 0; }
        EOF
        
        # appstreamcli
        cp /mingw64/bin_dummy/update-desktop-database.exe /mingw64/bin_dummy/appstreamcli.exe
        
        # desktop-file-validate  
        cp /mingw64/bin_dummy/update-desktop-database.exe /mingw64/bin_dummy/desktop-file-validate.exe
        
        # Add to PATH
        export PATH=/mingw64/bin_dummy:$PATH
        echo "PATH=$PATH" >> $GITHUB_ENV
    
    - name: Configure and build
      shell: msys2 {0}
      run: |
        export PATH=/mingw64/bin_dummy:$PATH
        
        # Create install directory
        install_dir="$(pwd)/meld_install"
        mkdir -p "$install_dir"
        
        # Configure
        meson setup _build --prefix="$install_dir" --buildtype=release
        
        # Build
        cd _build
        ninja
        
        # Install
        ninja install
    
    - name: Create portable package
      shell: msys2 {0}
      run: |
        # Setup directories
        mkdir -p portable/meld
        
        # Copy installed files
        cp -r meld_install/* portable/meld/
        
        # Find Python details
        python_version=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
        
        # Copy Python executable
        cp /mingw64/bin/python3.exe portable/meld/bin/
        cp /mingw64/bin/python.exe portable/meld/bin/ 2>/dev/null || true
        
        # Find and copy DLLs
        cd portable/meld/bin
        
        # Method 1: Copy all DLLs from mingw64/bin (safest approach)
        echo "=== Copying all potentially needed DLLs ==="
        cp /mingw64/bin/*.dll . 2>/dev/null || true
        
        # Clean up obviously unnecessary DLLs
        rm -f *test*.dll *example*.dll 2>/dev/null || true
        
        cd ../../..
        
        # Copy Python runtime
        cp -r /mingw64/lib/python${python_version} portable/meld/lib/
        
        # Copy GTK runtime directories
        for dir in gdk-pixbuf-2.0 gtk-3.0 girepository-1.0 gio; do
          [ -d "/mingw64/lib/$dir" ] && cp -r "/mingw64/lib/$dir" portable/meld/lib/
        done
        
        # Copy share directories
        for dir in glib-2.0 gtksourceview-4 icons themes locale; do
          [ -d "/mingw64/share/$dir" ] && cp -r "/mingw64/share/$dir" portable/meld/share/
        done
        
        # Ensure schemas are compiled
        if [ -f "/mingw64/bin/glib-compile-schemas.exe" ] && [ -d "portable/meld/share/glib-2.0/schemas" ]; then
          /mingw64/bin/glib-compile-schemas.exe portable/meld/share/glib-2.0/schemas
        fi
        
        # Create simple launcher
        cat > portable/meld/meld.cmd << 'EOF'
        @echo off
        "%~dp0bin\python3.exe" "%~dp0bin\meld" %*
        EOF
        
        # Create full environment launcher
        cat > portable/meld/meld_full.cmd << 'EOF'
        @echo off
        setlocal
        set MELD_DIR=%~dp0
        set PATH=%MELD_DIR%bin;%PATH%
        set PYTHONPATH=%MELD_DIR%lib\python3.12\site-packages;%MELD_DIR%lib\python3.12
        set GI_TYPELIB_PATH=%MELD_DIR%lib\girepository-1.0
        set GSETTINGS_SCHEMA_DIR=%MELD_DIR%share\glib-2.0\schemas
        set GTK_DATA_PREFIX=%MELD_DIR%
        set GTK_EXE_PREFIX=%MELD_DIR%
        set GTK_PATH=%MELD_DIR%
        set XDG_DATA_DIRS=%MELD_DIR%share
        
        "%MELD_DIR%bin\python3.exe" "%MELD_DIR%bin\meld" %*
        endlocal
        EOF
        
        # Test structure
        echo "=== Verifying package structure ==="
        [ -f "portable/meld/bin/meld" ] && echo "✓ meld script found" || echo "✗ meld script missing"
        [ -f "portable/meld/bin/python3.exe" ] && echo "✓ python3.exe found" || echo "✗ python3.exe missing"
        [ -d "portable/meld/lib/python${python_version}" ] && echo "✓ Python libs found" || echo "✗ Python libs missing"
        [ -d "portable/meld/share/glib-2.0" ] && echo "✓ GLib share found" || echo "✗ GLib share missing"
        
        # Create archive
        cd portable
        7z a ../meld-windows-portable.zip meld/
        tar -czf ../meld-windows-portable.tar.gz meld/
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: meld-windows-portable
        path: |
          meld-windows-portable.zip
          meld-windows-portable.tar.gz
