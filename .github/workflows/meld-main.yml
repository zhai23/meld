name: Build Windows Meld (Final Fix)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  windows-build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-python
          mingw-w64-x86_64-python-pip
          mingw-w64-x86_64-python-gobject
          mingw-w64-x86_64-python-cairo
          mingw-w64-x86_64-gtk3
          mingw-w64-x86_64-gtksourceview4
          mingw-w64-x86_64-adwaita-icon-theme
          mingw-w64-x86_64-gsettings-desktop-schemas
          mingw-w64-x86_64-meson
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-gettext
          mingw-w64-x86_64-glib2
          mingw-w64-x86_64-libxml2
          mingw-w64-x86_64-libxslt
    
    - name: Create dummy tools for Windows build
      shell: msys2 {0}
      run: |
        echo "=== Creating dummy tools for missing Linux utilities ==="
        mkdir -p /usr/local/bin
        
        # Create dummy itstool
        cat > /usr/local/bin/itstool << 'EOF'
        #!/usr/bin/env python3
        import sys
        sys.exit(0)
        EOF
        chmod +x /usr/local/bin/itstool
        
        # Create dummy update-desktop-database
        cat > /usr/local/bin/update-desktop-database << 'EOF'
        #!/bin/bash
        exit 0
        EOF
        chmod +x /usr/local/bin/update-desktop-database
        
        # Create dummy appstreamcli
        cat > /usr/local/bin/appstreamcli << 'EOF'
        #!/bin/bash
        exit 0
        EOF
        chmod +x /usr/local/bin/appstreamcli
        
        # Create dummy desktop-file-validate
        cat > /usr/local/bin/desktop-file-validate << 'EOF'
        #!/bin/bash
        exit 0
        EOF
        chmod +x /usr/local/bin/desktop-file-validate
        
        export PATH=/usr/local/bin:$PATH
        echo "PATH=$PATH" >> $GITHUB_ENV
    
    - name: Patch build files for Windows
      shell: msys2 {0}
      run: |
        echo "=== Patching for Windows compatibility ==="
        
        # Disable help directory if it exists
        if grep -q "^subdir('help')" meson.build; then
          sed -i "s/^subdir('help')/#subdir('help')/" meson.build
          echo "Disabled help subdirectory"
        fi
    
    - name: Configure build
      shell: msys2 {0}
      run: |
        export PATH=/usr/local/bin:$PATH
        
        echo "=== Configuring with meson (without profile option) ==="
        meson setup _build --prefix=/mingw64 --buildtype=release || {
            echo "=== Configuration failed, showing end of log ==="
            tail -50 _build/meson-logs/meson-log.txt
            exit 1
        }
    
    - name: Build
      shell: msys2 {0}
      run: |
        echo "=== Building with ninja ==="
        cd _build
        ninja
    
    - name: Create portable package
      if: success()
      shell: msys2 {0}
      run: |
        cd _build
        
        # Install to staging
        DESTDIR=$(pwd)/staging ninja install
        
        cd ..
        
        # Create portable directory
        mkdir -p portable/meld
        cp -r _build/staging/mingw64/* portable/meld/
        
        # Get Python version
        python_version=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
        
        # Copy Python runtime
        cp /mingw64/bin/python3.exe portable/meld/bin/
        cp /mingw64/bin/python${python_version}.dll portable/meld/bin/
        
        # Copy essential DLLs (using a more reliable method)
        cd portable/meld/bin
        for exe in python3.exe meld; do
          if [ -f "$exe" ]; then
            echo "=== Dependencies for $exe ==="
            ldd "$exe" | grep mingw64 | awk '{print $3}' | while read dll; do
              if [ -f "$dll" ] && [ ! -f "$(basename "$dll")" ]; then
                cp "$dll" .
                echo "Copied $(basename "$dll")"
              fi
            done
          fi
        done
        cd ../../..
        
        # Copy Python libraries
        cp -r /mingw64/lib/python${python_version} portable/meld/lib/
        
        # Copy GTK runtime directories
        for dir in gdk-pixbuf-2.0 gtk-3.0 girepository-1.0; do
          [ -d "/mingw64/lib/$dir" ] && cp -r /mingw64/lib/$dir portable/meld/lib/
        done
        
        # Copy required share directories
        mkdir -p portable/meld/share
        for dir in glib-2.0/schemas gtksourceview-4 icons/Adwaita icons/hicolor locale; do
          src="/mingw64/share/$dir"
          if [ -d "$src" ]; then
            dest="portable/meld/share/$(dirname "$dir")"
            mkdir -p "$dest"
            cp -r "$src" "$dest/"
          fi
        done
        
        # Compile schemas
        if [ -d "portable/meld/share/glib-2.0/schemas" ]; then
          glib-compile-schemas portable/meld/share/glib-2.0/schemas
        fi
        
        # Create Windows launcher
        cat > portable/meld/meld.cmd << 'LAUNCHER_END'
        @echo off
        set SCRIPT_DIR=%~dp0
        set SCRIPT_DIR=%SCRIPT_DIR:~0,-1%
        
        set PATH=%SCRIPT_DIR%\bin;%PATH%
        set PYTHONPATH=%SCRIPT_DIR%\lib\python3.12\site-packages;%SCRIPT_DIR%\lib\python3.12
        set GI_TYPELIB_PATH=%SCRIPT_DIR%\lib\girepository-1.0
        set GSETTINGS_SCHEMA_DIR=%SCRIPT_DIR%\share\glib-2.0\schemas
        set GTK_DATA_PREFIX=%SCRIPT_DIR%
        set GTK_THEME=Windows-10
        
        "%SCRIPT_DIR%\bin\python3.exe" "%SCRIPT_DIR%\bin\meld" %*
        LAUNCHER_END
        
        # Create archives
        cd portable
        tar -czf ../meld-windows-portable.tar.gz meld/
        7z a ../meld-windows-portable.zip meld/ 2>/dev/null || zip -r ../meld-windows-portable.zip meld/
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: meld-windows-build
        path: |
          meld-windows-portable.tar.gz
          meld-windows-portable.zip
        if-no-files-found: warn
